# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 11:30:09 2019

@author: 33743
"""

"""

There are exactly ten ways of selecting three from five, 12345:

123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

In combinatorics, we use the notation, 5C3=10.

In general, nCr=n!r!(n−r)!, where r≤n, n!=n×(n−1)×...×3×2×1, and 0!=1.

It is not until n=23, that a value exceeds one-million: 23C10=1144066.

How many, not necessarily distinct, values of nCr for 1≤n≤100, are greater than one-million?

"""

"""
# This way is slow, should have written out the combination formula..

from itertools import combinations

over_million_count = 0

for n in range(1, 101):
    lst = ['a'] * n
    for r in range(1, n + 1):
        count = 0
        for combination in combinations(lst, r):    # There is a faster way of looping over an iterable just to see how many elements are in it
            count += 1
        if count > 1000000:
            over_million_count += 1
    
print(over_million_count)
"""


from math import factorial

# Takes integers n and r and returns n choose r
def choose(n, r):
    return(int(factorial(n) / (factorial(r) * factorial(n - r))))
    
def main():
    count = 0
    for n in range(1, 101):
        for r in range(1, n + 1):
            if choose(n, r) > 1000000:
                count += 1
                
    print(count)
    
if __name__ == "__main__":
    main()

# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 09:35:12 2019

@author: 33743
"""

"""

Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.

n	Relatively Prime	φ(n)	n/φ(n)
2	1	1	2
3	1,2	2	1.5
4	1,3	2	2
5	1,2,3,4	4	1.25
6	1,5	2	3
7	1,2,3,4,5,6	6	1.1666...
8	1,3,5,7	4	2
9	1,2,4,5,7,8	6	1.5
10	1,3,7,9	4	2.5
It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.

Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.

"""

from math import sqrt, floor

# Want to find all factors of all numbers up to 1000000
up_to = 1000000

#This way of making factors_dict, for 35000 integers, is 75 times faster than the old way
factors_dict = {}

# Find factors of all numbers between 2 and 1000000
for i in range(2, up_to):
    
    # The first entry in the list of factors will always be itself
    factors_dict[i] = set([i])
    
    # Go from its biggest possible factor downwards
    for a in range(floor(sqrt(i)), 1, -1):
        
        if i % a == 0:
            # Add the factor and its associated factor to the relevant part of factors_dict
            factors_dict[i].add(a)
            factors_dict[i].add(int(i / a))
                
print('factors_dict creation complete')
 
ans = 0
mx = 0

#This loop, for 2500 integers, is 30 times faster than the old way
for i in range(2, up_to):
    print(i)
    
    # for a given number i, this set is all its relatively prime numbers (no factors in common)
    coprimes = 1 #number 1 itself
    
    #  the number 1 itself is always coprime, but that is accounted for in line 52 below
    for a in range(i - 1, 1, -1):
        
        if not factors_dict[i].intersection(factors_dict[a]):
            coprimes += 1
    
    temp = i / coprimes
    if temp > mx:
        mx = temp
        ans = i
        print(ans)
        
print(ans)

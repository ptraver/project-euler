# -*- coding: utf-8 -*-
"""
Created on Mon May 13 08:45:25 2019

@author: 33743
"""

"""

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

"""

from itertools import permutations

# Four-digit triangles
triangle_numbers = [int(a * (a + 1) / 2) for a in range(1, 150)]
triangle_list = [a for a in triangle_numbers if a > 999 and a < 10000 and str(a)[2] != '0'] # Numbers with 0 as their third digit are irrelevant

# Four-digit squares
square_numbers = [a ** 2 for a in range(1, 100)]
square_list = [a for a in square_numbers if a > 999 and a < 10000 and str(a)[2] != '0']

# Four-digit pentagons
pentagonal_numbers = [int(a * (3 * a - 1) / 2) for a in range(1, 100)]
pentagon_list = [a for a in pentagonal_numbers if a > 999 and a < 10000 and str(a)[2] != '0']

# Four-digit hexagons
hexagonal_numbers = [a * (2 * a - 1) for a in range(1, 100)]
hexagon_list = [a for a in hexagonal_numbers if a > 999 and a < 10000 and str(a)[2] != '0']

# Four-digit heptagons
heptagonal_numbers = [int(a * (5 * a - 3) / 2) for a in range(1, 100)]
heptagon_list = [a for a in heptagonal_numbers if a > 999 and a < 10000 and str(a)[2] != '0']

# Four-digit octagons
octagonal_numbers = [a * (3 * a - 2) for a in range(1, 100)]
octagon_list = [a for a in octagonal_numbers if a > 999 and a < 10000 and str(a)[2] != '0']


#Since there are fewest relevant octogonal numbers, I will begin with octogonals, and try to find combinations of other polygonal numbers that cooperate
all_nums_dict = {3: triangle_list, 4: square_list, 5: pentagon_list, 6: hexagon_list, 7: heptagon_list}


for permutation in permutations(all_nums_dict.keys()):
    answer_thing = [[a] for a in octagon_list]
    counter = 1
    for num in permutation:
        for entry in all_nums_dict[num]:
            holder = []
            for thing in answer_thing:
                #Could have been handier to turn it all into strings earlier
                if len(thing) == counter and str(entry)[:2] == str(thing[-1])[2:] and entry not in thing:
                        thing.append(entry)
                elif len(thing) > counter and str(entry)[:2] == str(thing[-1])[2:] and entry not in thing:
                        holder.append([thing, entry])
            for ting in holder:
                answer_thing.append(ting)
        counter += 1
        
    for yoke in answer_thing:
        if len(yoke) == 6 and str(yoke[-1])[2:] == str(yoke[0])[:2]:
            print(yoke, sum(yoke))
            exit()
    

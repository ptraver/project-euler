# -*- coding: utf-8 -*-
"""
Created on Mon Jul 15 14:41:22 2019

@author: 33743
"""

"""

The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:

1! + 4! + 5! = 1 + 24 + 120 = 145

Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:

169 → 363601 → 1454 → 169
871 → 45361 → 871
872 → 45362 → 872

It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,

69 → 363600 → 1454 → 169 → 363601 (→ 1454)
78 → 45360 → 871 → 45361 (→ 871)
540 → 145 (→ 145)

Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.

How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?

"""


# If seven numbers in a row are already found back in the list, I'll accept that a loop has begun

from math import factorial

chain_len_60 = 0

for i in range(2, 1000000):
    
    in_chain = 0
    chain = [i]
    
    while in_chain < 7:
    
        temp = 0
    
        for a in str(chain[-1]):
            temp += factorial(int(a))
            
        if temp in chain:
            in_chain += 1
        
        chain.append(temp)
        
    if len(chain) - 7 == 60:
        print(i)
        chain_len_60 += 1
        
print(chain_len_60)
        
# could maybe edit the script to make use of the fact that many numbers contain different orders of the same integers



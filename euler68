# -*- coding: utf-8 -*-
"""
Created on Mon May 27 09:40:06 2019

@author: 33743
"""

"""

Consider the following "magic" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.


Working clockwise, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3.

It is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.

Total	Solution Set
9	4,2,3; 5,3,1; 6,1,2
9	4,3,2; 6,2,1; 5,1,3
10	2,3,5; 4,5,1; 6,1,3
10	2,5,3; 6,3,1; 4,1,5
11	1,4,6; 3,6,2; 5,2,4
11	1,6,4; 5,4,2; 3,2,6
12	1,5,6; 2,6,4; 3,4,5
12	1,6,5; 3,5,4; 2,4,6
By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.

Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum 16-digit string for a "magic" 5-gon ring?

"""

from itertools import permutations

gon_list = []

arr = [1,2,3,4,5,6,7,8,9,10]

for permutation in permutations(arr, 3):
    sm = sum(permutation)
    
    arr2 = [a for a in arr if a not in permutation] 
    for permutation2 in permutations(arr2, 2):
        if sum(permutation2) + permutation[2] == sm:
            
            arr3 = [b for b in arr2 if b not in permutation2]
            for permutation3 in permutations(arr3, 2):
                if sum(permutation3) + permutation2[1] == sm:
                    
                    arr4 = [c for c in arr3 if c not in permutation3]
                    for permutation4 in permutations(arr4, 2):
                        if sum(permutation4) + permutation3[1] == sm:
                            
                            arr5 = [d for d in arr4 if d not in permutation4]
                                                     
                            if  sum(arr5) + permutation4[1] + permutation[1] == sm:
                                
                                gon_list.append([permutation, permutation2, permutation3, permutation4, arr5])

cleaned_gon = []

for l in gon_list:
    cleaned_gon.append([l[0][0], l[0][1], l[0][2], l[1][0], l[0][2], l[1][1], l[2][0], l[1][1], l[2][1], l[3][0], l[2][1], l[3][1], l[4][0], l[3][1], l[0][1]])
    
filtered_gon = [a for a in cleaned_gon if a[0] < a[3] and a[0] < a[6] and a[0] < a[9] and a[0] < a[12]]

strings_gon = []

for l in filtered_gon:
    temp = str(l[0]) + str(l[1]) + str(l[2]) + str(l[3]) + str(l[4]) + str(l[5]) + str(l[6]) + str(l[7]) + str(l[8]) + str(l[9]) + str(l[10]) + str(l[11]) + str(l[12]) + str(l[13]) + str(l[14])
    strings_gon.append(temp)

final_gon = [a for a in strings_gon if len(a) == 16]

print(max(final_gon))



"""
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39 Ã— 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.

HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.
"""

"""
# Attempt of a quick and dirty way here, that still isn't doing the trick...
count_of_pans = 0

for a in range(1, 3501):
	for b in range(1, 3501):
		print(a)

		prod = a * b
		string = str(a) + str(b) + str(prod)

		ls = []
		for letter in string:
			ls.append(letter)

		if sorted(ls) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']:
			print(prod)
			count_of_pans += 1

print(int(count_of_pans / 2))
"""



# More sohpisticated attempt here
import itertools

answer_list = []

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]


digit_lens = ((1, 4), (2, 3))

for ting in digit_lens:
	for a in itertools.permutations(lst, ting[0]):

		lst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
		for num in a:
			lst2.remove(num)
		
		for b in itertools.permutations(lst2, ting[1]):

			num1 = int(''.join(str(nm) for nm in a))
			num2 = int(''.join(str(nm) for nm in b))

			prod = num1 * num2

			if prod > 98765:
				continue

			print(prod)

			final_string = str(num1) + str(num2) + str(prod)
			final_list = [a for a in final_string]

			if sorted(final_list) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']:
				answer_list.append(prod)
				print(prod)

print(answer_list)
print(set(answer_list))
print(sum(set(answer_list)))

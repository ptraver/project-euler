"""
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

1/2	= 	0.5
1/3	= 	0.(3)
1/4	= 	0.25
1/5	= 	0.2
1/6	= 	0.1(6)
1/7	= 	0.(142857)
1/8	= 	0.125
1/9	= 	0.(1)
1/10	= 	0.1
Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
"""

from decimal import *


precision = getcontext().prec = 10000 # taking this as an arbitrary starting point
# If a pattern occurs 7 adjacent times towards the end of the string, I'll take that as the recurring pattern

longest_pattern = 1
winner = 0

for i in range(2, 1000):

	dec = ( str( Decimal(1) / Decimal(i) ) )[2:]
	len_dec = len(dec)

	if len_dec < precision: # weeds out non-recurring numbers
		continue

	pattern_len = 1
	is_pattern = False

	while is_pattern == False:

		#See comment on line 55 below
		else_blocker = 0


		# Avoid the last ten chars (arbitrary number) due to rounding
		if dec[-10:-10-pattern_len:-1] == dec[-10-pattern_len:-10-2*pattern_len:-1] == dec[-10-2*pattern_len:-10-3*pattern_len:-1] == dec[-10-3*pattern_len:-10-4*pattern_len:-1] == dec[-10-4*pattern_len:-10-5*pattern_len:-1] == dec[-10-5*pattern_len:-10-6*pattern_len:-1] == dec[-10-6*pattern_len:-10-7*pattern_len:-1]:

			else_blocker = 1
			is_pattern = True

			if pattern_len > longest_pattern:
				longest_pattern = pattern_len
				winner = i

		# I wanted to do simply 'else:' here but, the else kept executing even when the 'if:' above was satisfied...
		if else_blocker == 0:
			pattern_len += 1


print(longest_pattern, winner)

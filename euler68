# -*- coding: utf-8 -*-
"""
Created on Mon May 27 09:40:06 2019

@author: 33743
"""

"""

Consider the following "magic" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.


Working clockwise, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3.

It is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.

Total	Solution Set
9	4,2,3; 5,3,1; 6,1,2
9	4,3,2; 6,2,1; 5,1,3
10	2,3,5; 4,5,1; 6,1,3
10	2,5,3; 6,3,1; 4,1,5
11	1,4,6; 3,6,2; 5,2,4
11	1,6,4; 5,4,2; 3,2,6
12	1,5,6; 2,6,4; 3,4,5
12	1,6,5; 3,5,4; 2,4,6
By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.

Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum 16-digit string for a "magic" 5-gon ring?

"""

from itertools import permutations

# Constraints of a 3-gon

# 3 x 3 array of integers. Each array adds up to same number
# third digit of each array = second digit of the next, including last -> first 
# no other digits in common

#Takes an int s and a list lst. Returns a list of distinct tuples length 3 where sum(lst) == s
def correct_sum_permutations(s, lst):
    correct_sum_list = []
    for permutation in permutations(lst, 3):
        if sum(permutation) == s:
            correct_sum_list.append(permutation)
    return(correct_sum_list)
    
#Takes a list of tuples lst. Returns all viable combinations which satisfy 'magic' ring
def satisfy_magic_ring(lst):
    satisfy_list = []
    holder_list = []
    for tple in lst:
        for tple2 in lst:
            if tple[2] == tple2[1] and tple[:2] not in tple2:
                holder_list.append([tple, tple2])
    for candidate in holder_list:
        for tple in lst:
            # I bet this if statement can be made more efficient...
            if candidate[0][1] == tple[2] and candidate[1][2] == tple[1] and tple[0] not in candidate[0] and tple[0] not in candidate[1]:
                candidate.append(tple)
                satisfy_list.append(candidate)
                break
    
    #Must weed satisy_list of lists that are'nt in the right order (lowest outside digit first)
    weeded_satisfy_list = []
    for l in satisfy_list:
        if l[0][0] < l[1][0] and l[0][0] < l[2][0]:
            weeded_satisfy_list.append(l)
        
    return(weeded_satisfy_list)
   
def main():
    
    arr = [1,2,3,4,5,6]#,7,8,9,10]
    
    candidate_max_strings = []
    
    #These seem like sensible values to loop between
    for line_sum in range(sum(arr[:2], arr[-1]), sum(arr[-2:], arr[1])):
        candidate_max_strings.append(max(satisfy_magic_ring(correct_sum_permutations(line_sum, arr))))
        
    print(max(candidate_max_strings))
    
    
    
if __name__ == '__main__':
    main()
    

    

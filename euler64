# -*- coding: utf-8 -*-
"""
Created on Wed May 15 16:07:25 2019

@author: 33743
"""

"""

All square roots are periodic when written as continued fractions and can be written in the form:

N−−√=a0+1a1+1a2+1a3+…
For example, let us consider 23−−√:23−−√=4+23−−√−4=4+1123√−4=4+11+23√−37
If we continue we would get the following expansion:

23−−√=4+11+13+11+18+…
The process can be summarised as follows:

a0=4,123√−4=23√+47=1+23√−37
a1=1,723√−3=7(23√+3)14=3+23√−32
a2=3,223√−3=2(23√+3)14=1+23√−47
a3=1,723√−4=7(23√+4)7=8+23−−√−4
a4=8,123√−4=23√+47=1+23√−37
a5=1,723√−3=7(23√+3)14=3+23√−32
a6=3,223√−3=2(23√+3)14=1+23√−47
a7=1,723√−4=7(23√+4)7=8+23−−√−4

It can be seen that the sequence is repeating. For conciseness, we use the notation 23−−√=[4;(1,3,1,8)], to indicate that the block (1,3,1,8) repeats indefinitely.

The first ten continued fraction representations of (irrational) square roots are:

2–√=[1;(2)], period=1
3–√=[1;(1,2)], period=2
5–√=[2;(4)], period=1
6–√=[2;(2,4)], period=2
7–√=[2;(1,1,1,4)], period=4
8–√=[2;(1,4)], period=2
10−−√=[3;(6)], period=1
11−−√=[3;(3,6)], period=2
12−−√=[3;(2,6)], period=2
13−−√=[3;(1,1,1,1,6)], period=5

Exactly four continued fractions, for N≤13, have an odd period.

How many continued fractions for N≤10000 have an odd period?

"""

from decimal import *
from math import sqrt, floor


#Make the precision just follow i maybe...?
precision = getcontext().prec = 4000    #Arbitrary guess at the precision needed


squares = [a ** 2 for a in range(2, int(floor(sqrt(10001))) + 1)]
irrationals = [a for a in range(2, 10001) if a not in squares]


odd_period_count = 0


for num in irrationals:
    
    n = Decimal(num).sqrt()
    lst = []
    
    for i in range(2500):
        
        whole = floor(n)        
        remainder = Decimal(n - whole)
        lst.append(str(whole)) 
        n = Decimal(1 / remainder)
    
    is_pattern = False
    pattern_len = 1

    while is_pattern == False:
        
        
        #See comment on line 97 below
        else_blocker = 0
        
        """
        # Avoid the last ten chars (arbitrary number) due to rounding
        if lst[-10:-10-pattern_len:-1] == lst[-10-pattern_len:-10-2*pattern_len:-1] == lst[-10-2*pattern_len:-10-3*pattern_len:-1] == lst[-10-3*pattern_len:-10-4*pattern_len:-1] == lst[-10-4*pattern_len:-10-5*pattern_len:-1] == lst[-10-5*pattern_len:-10-6*pattern_len:-1] == lst[-10-6*pattern_len:-10-7*pattern_len:-1]:
            else_blocker = 1
            is_pattern = True 
        """
        #Forwards instead of backwards
        if lst[50:50+pattern_len] == lst[50+pattern_len:50+2*pattern_len] == lst[50+2*pattern_len:50+3*pattern_len] == lst[50+3*pattern_len:50+4*pattern_len] == lst[50+4*pattern_len:50+5*pattern_len] == lst[50+5*pattern_len:50+6*pattern_len] == lst[50+6*pattern_len:50+7*pattern_len] == lst[50+7*pattern_len:50+8*pattern_len]:
            else_blocker = 1
            is_pattern = True

            
        # I wanted to do simply 'else:' here but, the else kept executing even when the 'if:' above was satisfied...
        if else_blocker == 0:
            pattern_len += 1
            
    print(num, pattern_len)
            
    if pattern_len % 2 == 1:
        odd_period_count += 1
 
       
print(odd_period_count)
